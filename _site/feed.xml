<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Minsol Blog</title>
    <description>hello</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 28 Feb 2018 09:29:30 +0800</pubDate>
    <lastBuildDate>Wed, 28 Feb 2018 09:29:30 +0800</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>iOS使用Workspace来管理自己的项目和Framework</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;本文记录在实际开发中使用Workspace来管理自己的项目和Framework
&amp;lt;/br&amp;gt;本文Demo&lt;a href=&quot;https://github.com/minsol/WorkSpace&quot;&gt;Demo地址&lt;/a&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/framework.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Framework是资源的集合，将静态库和其头文件包含到一个结构中:.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用。&lt;code class=&quot;highlighter-rouge&quot;&gt;.a + .h + sourceFile = .framework。&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;静态库：链接时，静态库会被完整地复制到可执行文件中，被多次使用就有多份冗余拷贝&lt;/li&gt;
    &lt;li&gt;动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存&lt;/li&gt;
    &lt;li&gt;注意理解：无论是.a静态库还.framework静态库，我们需要的都是二进制文件+.h+其它资源文件的形式，不同的是，.a本身就是二进制文件，需要我们自己配上.h和其它文件才能使用，而.framework本身已经包含了.h和其它文件，可以直接使用。&lt;/li&gt;
    &lt;li&gt;图片资源的处理：两种静态库，一般都是把图片文件单独的放在一个.bundle文件中，一般.bundle的名字和.a或.framework的名字相同。.bundle文件很好弄，新建一个文件夹，把它改名为.bundle就可以了，右键，显示包内容可以向其中添加图片资源。&lt;/li&gt;
    &lt;li&gt;category是我们实际开发项目中经常用到的，把category打成静态库是没有问题的，但是在用这个静态库的工程中，调用category中的方法时会有找不到该方法的运行时错误（selector not recognized），解决办法是：在使用静态库的工程中配置other linker flags的值为-ObjC。&lt;/li&gt;
    &lt;li&gt;如果一个静态库很复杂，需要暴露的.h比较多的话，就可以在静态库的内部创建一个.h文件（一般这个.h文件的名字和静态库的名字相同），然后把所有需要暴露出来的.h文件都集中放在这个.h文件中，而那些原本需要暴露的.h都不需要再暴露了，只需要把.h暴露出来就可以了。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一准备工作&quot;&gt;一：准备工作&lt;/h3&gt;
&lt;h4 id=&quot;1创建一个工作空间&quot;&gt;1.创建一个工作空间。&lt;/h4&gt;
&lt;p&gt;File-&amp;gt;New-&amp;gt;Workspace,命名为workPlace,存放在文件夹WorkPlace中
&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/workPlace.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2创建一个主app工程&quot;&gt;2.创建一个主APP工程&lt;/h4&gt;
&lt;p&gt;将创建的工程放入WorkPlace与之前创建的工作工程同级
***
&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/cocoaTouch.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3创建一个cocoa-touch-static-library的静态库&quot;&gt;3.创建一个Cocoa Touch Static Library的静态库&lt;/h4&gt;
&lt;p&gt;将创建的工程放入WorkPlace与之前创建的工作工程同级&lt;/p&gt;
&lt;h4 id=&quot;4创建一个cocoa-touch-framework的静态库&quot;&gt;4.创建一个Cocoa Touch FrameWork的静态库&lt;/h4&gt;
&lt;p&gt;将创建的工程放入WorkPlace与之前创建的工作工程同级&lt;/p&gt;
&lt;h4 id=&quot;5目前工程的目录结构&quot;&gt;5.目前工程的目录结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/Contents.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;二将三个工程添加到workspace&quot;&gt;二：将三个工程添加到Workspace&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;点开workPlace.xcworkspace，然后添加对于的.xcodeproj
&amp;lt;/br&amp;gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/addFile.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;三将两个静态库添加到主工程&quot;&gt;三：将两个静态库添加到主工程&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;设置两个静态库的Edit Scheme在Run的时候为Release
&amp;lt;/br&amp;gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/editScheme.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;在主工程里面添加Header Search Paths
&amp;lt;/br&amp;gt;在主项目的Build Settings 里找到Header Search Paths，添加一项&lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../Framework&lt;/code&gt;
&amp;lt;/br&amp;gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/HeaderSearch.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;静态库添加到主工程里
&amp;lt;/br&amp;gt;在主项目的Build Phases 里找到Link Binary With Libraries添加对接的静态库
&amp;lt;/br&amp;gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/LinkBinary.png&quot; alt=&quot;image&quot; /&gt;
&amp;lt;/br&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;font color=red&amp;gt;注意：swift里面的Framework需要在target -&amp;gt; General -&amp;gt;Embedded Binaries 中添加这个framework&amp;lt;/font&amp;gt;（详情参见之前文章&lt;a href=&quot;https://minsol.github.io/2018/02/07/FrameWork/&quot;&gt;swift—–打包自己的framework&lt;/a&gt;）
&amp;lt;/br&amp;gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/Embedded.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;为.a的静态库添加swift和OC的桥接文件
&amp;lt;/br&amp;gt;（详情参见之前文章&lt;a href=&quot;https://minsol.github.io/2018/02/07/Bridging-Header-2/&quot;&gt;Bridging-Header—–手动创建桥接文件&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;在主工程中导入头文件Build&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 07 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/07/Workspace/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/07/Workspace/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>iOS打包自己的framework</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;本文记录在实际开发中打包自己的framework
&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/framework.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Framework是资源的集合，将静态库和其头文件包含到一个结构中:.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用。&lt;code class=&quot;highlighter-rouge&quot;&gt;.a + .h + sourceFile = .framework。&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;静态库：链接时，静态库会被完整地复制到可执行文件中，被多次使用就有多份冗余拷贝&lt;/li&gt;
    &lt;li&gt;动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存&lt;/li&gt;
    &lt;li&gt;注意理解：无论是.a静态库还.framework静态库，我们需要的都是二进制文件+.h+其它资源文件的形式，不同的是，.a本身就是二进制文件，需要我们自己配上.h和其它文件才能使用，而.framework本身已经包含了.h和其它文件，可以直接使用。&lt;/li&gt;
    &lt;li&gt;图片资源的处理：两种静态库，一般都是把图片文件单独的放在一个.bundle文件中，一般.bundle的名字和.a或.framework的名字相同。.bundle文件很好弄，新建一个文件夹，把它改名为.bundle就可以了，右键，显示包内容可以向其中添加图片资源。&lt;/li&gt;
    &lt;li&gt;category是我们实际开发项目中经常用到的，把category打成静态库是没有问题的，但是在用这个静态库的工程中，调用category中的方法时会有找不到该方法的运行时错误（selector not recognized），解决办法是：在使用静态库的工程中配置other linker flags的值为-ObjC。&lt;/li&gt;
    &lt;li&gt;如果一个静态库很复杂，需要暴露的.h比较多的话，就可以在静态库的内部创建一个.h文件（一般这个.h文件的名字和静态库的名字相同），然后把所有需要暴露出来的.h文件都集中放在这个.h文件中，而那些原本需要暴露的.h都不需要再暴露了，只需要把.h暴露出来就可以了。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一准备工作&quot;&gt;一：准备工作&lt;/h3&gt;
&lt;h4 id=&quot;1创建一个cocoa-touch-framework的静态库&quot;&gt;1.创建一个Cocoa Touch FrameWork的静态库&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/workSpace/cocoaTouch.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2创建一个swift的文件&quot;&gt;2.创建一个.swift的文件&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/FrameWork/FrameWork1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3属性和方法都需要使用public&quot;&gt;3.属性和方法都需要使用：public&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/FrameWork/FrameWork2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;4选择需要暴露的头文件&quot;&gt;4.选择需要暴露的头文件&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/FrameWork/FrameWork3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5编译&quot;&gt;5.编译&lt;/h4&gt;

&lt;h3 id=&quot;二使用&quot;&gt;二：使用&lt;/h3&gt;
&lt;h4 id=&quot;1直接拖到其他工程里面可以使用&quot;&gt;1.直接拖到其他工程里面可以使用&lt;/h4&gt;
&lt;p&gt;&amp;lt;font color=red&amp;gt;注意：有一点和oc的framework不同，这里需要在target -&amp;gt;General -&amp;gt;Embedded Binaries 中添加这个framework,添加成功后会自动在Linked Framework and Libraries中自动添加这个framework,如果只在Linked Framework and Libraries中添加这个framework会导致库无法载入（OC创建的framework应该是正常的），项目无法运行&amp;lt;/font&amp;gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/07/FrameWork/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/07/FrameWork/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>iOS_Swift中桥接头文件建立的两种方法</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;本文记录在实际开发中桥接头文件建立的两种方法
&amp;lt;/br&amp;gt;备注：swift环境
***&lt;/p&gt;

&lt;h3 id=&quot;方式一在swift环境下的工程里面还没有加入任何objective-c的文件时&quot;&gt;方式一：在swift环境下的工程里面还没有加入任何Objective-C的文件时&lt;/h3&gt;
&lt;h4 id=&quot;直接创建一个objective-c的文件&quot;&gt;直接创建一个Objective-C的文件&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/Bridging-Header/Bridging-Header1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;方式二自己手动创建&quot;&gt;方式二：自己手动创建&lt;/h3&gt;
&lt;h4 id=&quot;1创建一个header-file&quot;&gt;1.创建一个Header File&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/Bridging-Header/Bridging-Header2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2路径选择targetsbuildsetting搜索header------project_dir项目名字bridging-headerh&quot;&gt;2.路径选择&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS———BuildSetting———搜索header------$(PROJECT_DIR)/项目名字/Bridging-Header.h&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/Bridging-Header/Bridging-Header3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3编译通过&quot;&gt;3.编译通过&lt;/h4&gt;

&lt;h3 id=&quot;顺便记录一下objective-c下的pch的创建&quot;&gt;顺便记录一下Objective-C下的PCH的创建&lt;/h3&gt;
&lt;h4 id=&quot;先说一下pch的作用&quot;&gt;先说一下pch的作用：&lt;/h4&gt;
&lt;p&gt;预编译头文件(一般扩展名为.PCH),是把一个工程中较稳定的代码预先编译好放在一个文件(.PCH)里,它们在整个工程中是较为稳定的,即在工程开发过程中不会经常被修改的代码。在我的理解里是把一些宏定义（kScreenW等），一些要在多个类中使用的头文件在此文件中书写。简单来说，在.pch文件中定义的宏定义会作用到项目中的所有文件。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;存放一些全局的宏(整个项目中都用得上的宏)；&lt;/li&gt;
    &lt;li&gt;用来包含一些全部的头文件(整个项目中都用得上的头文件)；&lt;/li&gt;
    &lt;li&gt;能自动打开或者关闭日志输出功能。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;实际操作&quot;&gt;实际操作：&lt;/h4&gt;
&lt;h5 id=&quot;1创建一个header-file-1&quot;&gt;1.创建一个Header File&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/Bridging-Header/Bridging-Header4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;2路径选择targetsbuildsetting搜索pch------project_dir项目名字bridging-headerh&quot;&gt;2.路径选择&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS———BuildSetting———搜索pch------$(PROJECT_DIR)/项目名字/Bridging-Header.h&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/minsol/MarkdownPhotos/master/Images/Bridging-Header/Bridging-Header5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3编译通过-1&quot;&gt;3.编译通过&lt;/h4&gt;

</description>
        <pubDate>Wed, 07 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/07/Bridging-Header-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/07/Bridging-Header-2/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>iOS备忘录3-图片处理</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在本文中只记录在实际应用中图片处理的简单使用，做以备忘。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
     获取图片中的像素颜色值
     - parameter pos: 图片中的位置
     - returns: 颜色值
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPixelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UnsafePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UInt8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDataGetBytePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pixelInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixelInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;colorLiteralRed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/15/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/15/%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>iOS备忘录2-视频处理</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在本文中只记录在实际应用中视频处理的简单使用，做以备忘。&lt;/p&gt;

&lt;h3 id=&quot;针对本地视频的需求简介&quot;&gt;针对本地视频的需求简介&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#视频剪切&quot;&gt;视频剪切&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#视频快速播放&quot;&gt;视频快速播放&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#视频添加实时滤镜&quot;&gt;视频添加实时滤镜&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#视频叠加背景音乐&quot;&gt;视频叠加背景音乐&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#视频叠加水印&quot;&gt;视频叠加水印&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#视频写入本地并导出到系统相册&quot;&gt;视频写入本地并导出到系统相册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;视频剪切&quot;&gt;视频剪切&lt;/h5&gt;

&lt;h5 id=&quot;视频快速播放&quot;&gt;视频快速播放&lt;/h5&gt;

&lt;h5 id=&quot;视频添加实时滤镜&quot;&gt;视频添加实时滤镜&lt;/h5&gt;

&lt;h5 id=&quot;视频叠加背景音乐&quot;&gt;视频叠加背景音乐&lt;/h5&gt;

&lt;h5 id=&quot;视频叠加水印&quot;&gt;视频叠加水印&lt;/h5&gt;

&lt;h5 id=&quot;视频写入本地并导出到系统相册&quot;&gt;视频写入本地并导出到系统相册&lt;/h5&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/15/%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/15/%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>iOS备忘录1-委托和Block的回调</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在本文中只记录在实际应用中委托和Block回调的简单使用，做以备忘。&lt;/p&gt;

&lt;h3 id=&quot;委托delegate&quot;&gt;委托（Delegate）&lt;/h3&gt;

&lt;h5 id=&quot;首先明确两点概念&quot;&gt;首先明确两点概念：&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;委托（Delegate）：委托是Objective-C中常用的一种设计模式（也叫代理设计模式），由代理对象、委托者、协议三部分组成。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;协议 (Protocol)：就是遵守了某个协议后就要按照这个协议来办事，通常@protocol与@end在 声明协议时是成对出现。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;注1：其实&lt;strong&gt;Protocol&lt;/strong&gt;和&lt;strong&gt;Delegate&lt;/strong&gt;完全不是一回事，只是因为代理的实现通常与协议是密不可分的，所以我们经常在同一个头文件里看到这两个单词才将这两个放在一起说。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;委托的使用流程&quot;&gt;委托的使用流程&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;委托方：1.指定原则（协议）2.声明一个代理人的属性（delegate）3.在适当的时机，通知代理人执行代理方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;代理方： 1.遵守协议 2.设置自己为委托方的代理人 3.实现 协议方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;我是委托方&quot;&gt;·我是委托方&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;委托方的 .h 文件中实现上诉1、2两点：指定原则（协议）、声明一个代理人的属性（delegate）
#import &amp;lt;UIKit/UIKit.h&amp;gt;
@protocol SJSAddUserDelegate &amp;lt;NSObject&amp;gt;
//代理方必须实现的方法
@required
//代理方可选实现的方法
@optional
- (void)updataUser;//可以带参
@end

@interface SJSAddUserViewController : UIViewController
//关键属性委托代理人，为了避免造成循环引用，代理一般需使用弱引用
@property (nonatomic, weak) id&amp;lt;SJSAddUserDelegate&amp;gt; delegate;
@end

委托方的 .m 文件中实现上诉第三点：在适当的时机，通知代理人执行代理方法
if ([self.delegate respondsToSelector:@selector(updataUser)]){
	[self.delegate updataUser];//在适当的时候调用代理方法
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;我是代理方&quot;&gt;·我是代理方&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;代理方的.m文件中实现上诉第一点：遵守协议
@interface SJSUserController ()&amp;lt;SJSAddUserDelegate&amp;gt;
第二点：设置自己为委托方的代理人
addVc.delegate = self;//在创建委托方的时候指定直接为代理人
第三点：实现 协议方法
-(void)updataUser{
    //做代理人应该做的事
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;block&quot;&gt;Block&lt;/h3&gt;
&lt;p&gt;Block的详细介绍请参照：&lt;a href=&quot;http://www.jianshu.com/p/007632bbb01d&quot;&gt;iOS-Block的详解&lt;/a&gt;具体进行了解。&lt;/p&gt;

&lt;h5 id=&quot;场景一回调&quot;&gt;场景一：回调&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;委托方.h
//声明一个Block类型的别名
typedef void(^AddCityFinish_Block)(NSString*,NSString*);

//声明block属性
@property(nonatomic,copy) AddCityFinish_Block block;
//用于直接传Block：方便愉快的撸代码
- (void)returnText:(AddCityFinish_Block)block;

委托方.m
/**
 *  对Block进行赋值  ，在代理方就直接调用方法就可以了
 *  这个就是相当于一个setter方法，对自己的block属性进行赋值
 *  @param block
 */
- (void)returnText:(AddCityFinish_Block)block{
    self.block = _block;
}

//适当的时机 执行block所代表的匿名函数：并将数据作为参数传回去
self.block(self.cityNameField.text, self.populationField.text);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;代理方.m文件中
//在创建写一个界面的时候，设置下个界面的block属性为这里的匿名函数

/** Block方法一 ： 写Block的时候没有提示 */
addCity.block = ^(NSString *name, NSString *population) {
//做代理人应该做的事
};

/** Block方法二 ： 写Block的时候有提示 （方便快捷）*/
[addCity returnText:^(NSString * name , NSString *population ) {
//做代理人应该做的事
}];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;场景二数据请求二次封装afnetworking未完待续&quot;&gt;场景二：数据请求（二次封装AFNetworking）：未完待续…&lt;/h5&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/10/delegateAndBlock/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/10/delegateAndBlock/</guid>
        
        <category>备忘录</category>
        
        
      </item>
    
      <item>
        <title>晚安，别睡的太晚</title>
        <description>&lt;h2 id=&quot;晚安&quot;&gt;晚安&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;别睡的太晚&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;读书的时候我喜欢熬夜，喜欢晚睡。﻿﻿&lt;/p&gt;

&lt;p&gt;当时觉得，熬夜算什么？晚睡又如何？二十多岁的年纪，不去熬夜happy，难不成要等到六十多岁再去体验疯狂吗？﻿﻿&lt;/p&gt;

&lt;p&gt;然而，当我开始皮肤变差、黑眼圈日益加深、还伴随着头痛眼睛痛……这一切迹象告诉我，熬夜和晚睡，是要付出代价的。﻿﻿&lt;/p&gt;

&lt;p&gt;刚开始还不以为然，觉得这就是熬夜的副作用，补眠可以补回来，可是，当我连续睡了几天之后，头却痛得越来越频繁。赶紧去看了医生，好在结果不算坏。医生说今后只要注意休息，不要熬夜，把作息习惯调整过来，不要晚上熬夜白天补，觉，是补不回来的。﻿﻿&lt;/p&gt;

&lt;p&gt;这之后，我开始意识到健康的重要性，你消耗身体取得成就，同时也失去健康，得到一副藏满病魔的躯体。﻿﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ohwmdtyfr.bkt.clouddn.com/home-bg-o.jpg&quot; alt=&quot;晚安&quot; /&gt;&lt;/p&gt;

&lt;p&gt;近年来，网络上连续曝出很多因工作熬夜去世的人。﻿﻿&lt;/p&gt;

&lt;p&gt;翻看这些人过往的生活，发现熬夜加班和经常晚睡是其家常便饭；长期睡眠不足，有人甚至连续几天只睡几个小时。﻿﻿&lt;/p&gt;

&lt;p&gt;因为长期熬夜，你的身体机能变差了，头脑变得混沌，就像是亲手安装在身体内部威力无比的炸药，只等哪一天爆发。﻿﻿&lt;/p&gt;

&lt;p&gt;如果你经历过生离死别的场面，你就会懂得健康对于一个人来说多么重要。﻿﻿&lt;/p&gt;

&lt;p&gt;每个人都扮演着多重角色，一旦遭遇不测，遭遇痛苦袭击的，却是一个家庭。当你经历过生死，你会发现，相比你要怎么努力，怎么拼命，来获取一种高质量的生活；拥有一个健康的身体，一个健全的家庭，远比这些可以看得见的东西还要重要。因为你，不是一个人，你身后是一个家。﻿﻿&lt;/p&gt;

&lt;p&gt;所以，不管你今天的工作有没有做完；不管你今天是否要通宵happy；不管你准备熬夜干什么，都请停下来，去睡觉。﻿﻿&lt;/p&gt;

&lt;p&gt;任何事情都可以等到明天，唯独身体和健康，不会等。﻿﻿&lt;/p&gt;

&lt;p&gt;所以，别睡得太晚。﻿&lt;/p&gt;

</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/12/09/goodnight/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/09/goodnight/</guid>
        
        <category>小萍</category>
        
        
      </item>
    
      <item>
        <title>你养我长大，我陪你变老</title>
        <description>&lt;h2 id=&quot;你养我长大我陪你变老&quot;&gt;你养我长大，我陪你变老&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;想写这篇文章很久了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很久之前跟朋友一起吃饭，依照惯例的开启了八卦模式。从身边的某某明星出轨到不知名的路人甲。﻿&lt;/p&gt;

&lt;p&gt;后来，﻿&lt;/p&gt;

&lt;p&gt;不知怎么的谈起了自己的父母。﻿﻿&lt;/p&gt;

&lt;p&gt;她说，有一次她哥发了一个很暴力的朋友圈，她评论了一个：已拨打110。﻿&lt;/p&gt;

&lt;p&gt;评论完朋友圈不超过十分钟，就收到了爸妈的夺命连环call：打电话让他删掉不就可以了吗，什么呀就报警！﻿&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;我说，是啊。﻿&lt;/p&gt;

&lt;p&gt;我在异地上大学的时候，我妈经常转给我一些没什么实质内容的伪心灵鸡汤，怕我一个人在异地被骗。﻿&lt;/p&gt;

&lt;p&gt;还经常给我转发一些为了骗流量的谣言。她真的就相信。﻿&lt;/p&gt;

&lt;p&gt;于是我们打开了父母的对话框，像讲笑话一样在给彼此分享着我们点都不会点开的东西。﻿&lt;/p&gt;

&lt;p&gt;﻿&lt;/p&gt;

&lt;p&gt;《9种人，插肩即可，无需深交》﻿&lt;/p&gt;

&lt;p&gt;《什么才是真朋友，写的真好》﻿&lt;/p&gt;

&lt;p&gt;《为什么吃亏是福，精辟！》﻿&lt;/p&gt;

&lt;p&gt;《紧急，不要转发！不然会惹祸上身！》﻿&lt;/p&gt;

&lt;p&gt;可是，﻿&lt;/p&gt;

&lt;p&gt;当笑话在聊的话题，却瞬间变得伤感了起来。﻿&lt;/p&gt;

&lt;p&gt;父母究竟是在什么时候老的呢。﻿&lt;/p&gt;

&lt;p&gt;月前跟妈妈说哪天周末抽空回家，﻿之后的每次通话她都在规划我回家后给我做些什么吃的补补。一会说炖个土鸡，一会说让我爸去买野生的鳝鱼。尽管我只在家待一天。﻿&lt;/p&gt;

&lt;p&gt;那一瞬间，泪目。﻿&lt;/p&gt;

&lt;p&gt;父母表达爱的方式很简单，就是把最好的都给你。﻿&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ohwmdtyfr.bkt.clouddn.com/post-bg-parents.jpg&quot; alt=&quot;原本&quot; /&gt;&lt;/p&gt;

&lt;p&gt;高中毕业疯狂的想逃离家乡，所以去了离家很远的西南地区上大学。在那四年里，离家很远，玩的很嗨，几乎没有想过家，思念过父母。﻿&lt;/p&gt;

&lt;p&gt;可是，有一天，突然发现他们昨天还是什么都懂，还在精神满满的跟我们讲着社会险恶。如今，却是大事小事都要打电话问问我的意见。﻿﻿&lt;/p&gt;

&lt;p&gt;我们总想背上行囊去找诗和远方，却嫌归家的路途折腾又漫长。﻿&lt;/p&gt;

&lt;p&gt;我们有时间把父母的朋友圈当笑话念，却没有时间在电话这头听他们的碎碎念。﻿&lt;/p&gt;

&lt;p&gt;所以，毕业义无反顾回到家乡。虽然发展前景不太好，但是至少离家近啊。﻿&lt;/p&gt;

&lt;p&gt;所以，就算由于工作原因不能频繁回家，却能保证两天一次电话的频率。﻿&lt;/p&gt;

&lt;p&gt;曾经在知乎上看到独生子女是种怎样的体验：不敢死，不敢远嫁，因为他们只有我。﻿&lt;/p&gt;

&lt;p&gt;特别喜欢一句话：父母在，不远游，游必有方。﻿&lt;/p&gt;

&lt;p&gt;我们无法阻止父母变老。﻿&lt;/p&gt;

&lt;p&gt;但希望我们能更有耐心，可以陪他们更久一点。﻿&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/09/04/parents/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/04/parents/</guid>
        
        <category>小萍</category>
        
        
      </item>
    
  </channel>
</rss>
